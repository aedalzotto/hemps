RED  =\033[0;31m
NC   =\033[0m 		# No Color

KERNEL_PKG_TGT    = ../include/kernel_pkg.o
KERNEL_PKG_SRC    = $(KERNEL_PKG_TGT:.o=.c) $(KERNEL_PKG_TGT:.o=.h)

CFLAGS				= -O2 -Wall -s -std=c99
#CFLAGS			   += -fms-extensions
GCC					= riscv-sifive-elf-gcc -march=rv32im
AS					= riscv-sifive-elf-as -march=rv32im
LD					= riscv-sifive-elf-ld
DUMP				= riscv-sifive-elf-objdump
COPY				= riscv-sifive-elf-objcopy -O binary

BOOT_MASTER       = boot_master
BOOT_MASTER_SRC   = kernel/master/rv32i/boot.S
KERNEL_MASTER 	  = kernel_master
KERNEL_MASTER_SRC = kernel/master/kernel_master.c
KERNEL_MASTER_H	  = kernel/master/kernel_master.h

BOOT_SLAVE        = boot_slave
BOOT_SLAVE_SRC	  = kernel/slave/rv32i/boot.S
KERNEL_SLAVE 	  = kernel_slave
KERNEL_SLAVE_SRC  = kernel/slave/kernel_slave.c
KERNEL_MASTER_H	  = kernel/slave/kernel_slave.h

#https://www.gnu.org/software/make/manual/make.html#Automatic-Variables
MODULES_DIR = modules/
MODULES_NAMES = utils packet applications pending_service reclustering new_task communication processors task_control task_location task_migration task_scheduler resource_manager
MODULES_SRC = $(addsuffix .c, $(addprefix $(MODULES_DIR), $(MODULES_NAMES) ) ) $(addsuffix .h, $(addprefix $(MODULES_DIR), $(MODULES_NAMES) ) )
MODULES_TGT = $(addsuffix .o, $(addprefix $(MODULES_DIR), $(MODULES_NAMES) ) )

KERNEL_MASTER_MODULES = utils packet applications reclustering new_task communication processors resource_manager
KERNEL_MASTER_TGT     = $(addsuffix .o, $(addprefix $(MODULES_DIR), $(KERNEL_MASTER_MODULES) ) )

KERNEL_SLAVE_MODULES = utils packet pending_service communication task_control task_location task_migration task_scheduler
KERNEL_SLAVE_TGT 	 = $(addsuffix .o, $(addprefix $(MODULES_DIR), $(KERNEL_SLAVE_MODULES) ) )

$(info $(KERNEL_MASTER_TGT))

default: $(KERNEL_MASTER).txt $(KERNEL_SLAVE).txt 

$(KERNEL_PKG_TGT): $(KERNEL_PKG_SRC)
	@printf "${RED}Compiling Kernel Package: %s ...${NC}\n" "$*.c"
	$(GCC) -c $*.c -o $*.o $(CFLAGS)

$(MODULES_TGT): $(MODULES_SRC)
	@printf "${RED}Compiling Kernel %s ...${NC}\n" "$*.c"
	$(GCC) -c $*.c -o $*.o $(CFLAGS)

$(KERNEL_MASTER).txt: $(KERNEL_PKG_TGT) $(MODULES_TGT) $(KERNEL_MASTER_SRC) $(KERNEL_MASTER_H) $(BOOT_MASTER_SRC)
	@printf "${RED}Compiling Kernel Master: %s ...${NC}\n" "$(KERNEL_MASTER).c" 
	@$(AS) $(BOOT_MASTER_SRC) -o $(BOOT_MASTER).o --defsym sp_addr=$(MEM_SP_INIT)
	@$(GCC) -c $(KERNEL_MASTER_SRC) -o $(KERNEL_MASTER).o $(CFLAGS)
	@$(LD) -Ttext 0 -eboot_master -Map $(KERNEL_MASTER).map -s -N -o $(KERNEL_MASTER).bin $(BOOT_MASTER).o $(KERNEL_MASTER).o $(KERNEL_MASTER_TGT) $(KERNEL_PKG_TGT)
	@$(LD) -Ttext 0 -eboot_master -Map $(KERNEL_MASTER)_debug.map -o $(KERNEL_MASTER)_debug.bin $(BOOT_MASTER).o $(KERNEL_MASTER).o $(KERNEL_MASTER_TGT) $(KERNEL_PKG_TGT)
	@$(DUMP) -S $(KERNEL_MASTER)_debug.bin > $(KERNEL_MASTER).lst
	@$(COPY) $(KERNEL_MASTER).bin $(KERNEL_MASTER).dump
	@hexdump -v -e '1/1 "%02x" 1/1 "%02x" 1/1 "%02x" 1/1 "%02x" "\n"' $(KERNEL_MASTER).dump > $(KERNEL_MASTER).txt

$(KERNEL_SLAVE).txt: $(KERNEL_PKG_TGT) $(MODULES_TGT) $(KERNEL_SLAVE_SRC) $(KERNEL_SLAVE_H) $(BOOT_SLAVE_SRC)
	@printf "${RED}Compiling Kernel Slave: %s ...${NC}\n" "$(KERNEL_SLAVE).c"
	@$(AS) $(BOOT_SLAVE_SRC) -o $(BOOT_SLAVE).o --defsym sp_addr=$(PAGE_SP_INIT)
	@$(GCC) -c $(KERNEL_SLAVE_SRC) -o $(KERNEL_SLAVE).o $(CFLAGS)
	@$(LD) -Ttext 0 -eboot_slave -Map $(KERNEL_SLAVE).map -s -N -o $(KERNEL_SLAVE).bin $(BOOT_SLAVE).o $(KERNEL_SLAVE).o $(KERNEL_SLAVE_TGT) $(KERNEL_PKG_TGT)
	@$(LD) -Ttext 0 -eboot_slave -Map $(KERNEL_SLAVE)_debug.map -o $(KERNEL_SLAVE)_debug.bin $(BOOT_SLAVE).o $(KERNEL_SLAVE).o $(KERNEL_SLAVE_TGT) $(KERNEL_PKG_TGT)
	@$(DUMP) -S $(KERNEL_SLAVE)_debug.bin > $(KERNEL_SLAVE).lst
	@$(COPY) $(KERNEL_SLAVE).bin $(KERNEL_SLAVE).dump
	@hexdump -v -e '1/1 "%02x" 1/1 "%02x" 1/1 "%02x" 1/1 "%02x" "\n"' $(KERNEL_SLAVE).dump > $(KERNEL_SLAVE).txt

clean:
	@printf "Cleaning up\n"
	@rm -rf modules/*.o
	@rm -rf *.o
	@rm -rf *.bin
	@rm -rf *.map
	@rm -rf *.lst
	@rm -rf *.txt
	@rm -rf *.dump

